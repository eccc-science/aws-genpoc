#configuration file to run the workflow
configfile: "config.yaml"

# NOTE: caching as specified in the MANIFEST does not work with snakemake wrappers.  If you use them it installs the environment each time.
# Snakemake file for running FastQC on all files in the mydata folder using s3.remote()
from snakemake.remote.S3 import RemoteProvider as S3RemoteProvider
# use s3=S3RemoteProvider(keep_local=True) to have the download files stay when running locally.  Note delete local files or move them outside the workflow before running agc workflow run or else they will get zipped and copied back up.
s3=S3RemoteProvider(keep_local=True)

# Define the S3 bucket and folder where the data is stored
S3_BUCKET = config["S3"]["BUCKET"]
#DATA_FOLDER = "Genomics-Jordyn/2022" 
DATA_FOLDER = config["S3"]["DATA_FOLDER"]

# Comment out this line to use a single file set.  Note this is faster when running a test.
#CONDITIONS = ["OS00E70F"] 
CONDITIONS = config["S3"]["CONDITIONS"]

# Comment out this line to use the glob_wildcards function that will read and process all files in the directory
#CONDITIONS = s3.glob_wildcards("genpocdata-992085379228-ca-central-1/aws-genomics-cli/{condition}_R1.fastq.gz").condition

# Assumes all paired files are in the format <filename>_R1 and <filename>_R2
REPLICATES = config["S3"]["REPLICATES"]

# Folders to store the output data in
FASTQC_REPORTS = config["OUTPUT_FOLDERS"]["FASTQC_REPORTS"]
FASTQC_TRIMMED_REPORTS = config["OUTPUT_FOLDERS"]["FASTQC_TRIMMED_REPORTS"]
TRIM_FOLDER = config["OUTPUT_FOLDERS"]["TRIM_FOLDER"]
TRIM_MERGE_FOLDER = config["OUTPUT_FOLDERS"]["TRIM_MERGE_FOLDER"]     
MUTIQC_FOLDER = config["OUTPUT_FOLDERS"]["MUTIQC_FOLDER"]
DIAMOND_FOLDER = config["OUTPUT_FOLDERS"]["DIAMOND_FOLDER"]

ADATPERS_FOLDER = config["DATABASES"]["FOLDER"]
ADAPTER_FILE = config["TRIM"]["ADAPTER_FILE"]


# Define the input fasta file to use for diamond
INPUT_FASTA_ZIP = config["DATABASES"]["FASTA"]["ZIP"]
INPUT_FASTA= config["DATABASES"]["FASTA"]["FILE"]
INPUT_FASTA_URL = config["DATABASES"]["FASTA"]["URL"]
INPUT_FASTA_ZIP_EXT= config["DATABASES"]["FASTA"]["ZIP_EXT"]
INPUT_FASTA_EXT= config["DATABASES"]["FASTA"]["FILE_EXT"]
INPUT_FASTA_FOLDER= config["DATABASES"]["FASTA"]["FOLDER"]

FASTQC_THREADS = config["FASTQC"]["THREADS"]
FASTQC_MEM_MB = config["FASTQC"]["MEM_MB"]

TRIM_THREADS = config["TRIM"]["THREADS"]
TRIM_MEM_MB = config["TRIM"]["MEM_MB"]
TRIM_SLIDINGWINDOW = config["TRIM"]["SLIDINGWINDOW"]
TRIM_MINLEN = config["TRIM"]["MINLEN"]
TRIM_ADAPTER_SETTINGS = config["TRIM"]["ADAPTER_SETTINGS"]

DIAMOND_THREADS = config["DIAMOND"]["THREADS"]
DIAMOND_MEM_MB = config["DIAMOND"]["MEM_MB"] 
DIAMOND_OUTPUT_FMT = config['DIAMOND']['OUTPUT_FORMAT']
DIAMOND_EVALUE=config['DIAMOND']['EVALUE']
DIAMOND_K = config['DIAMOND']['MAX_TARGET_SEQS']
DIAMOND_ARGS = config['DIAMOND']['ARGS']
DIAMOND_ID = config['DIAMOND']['ID']

KRAKEN_FILE = config["KRAKEN"]["FILE"]
KRAKEN_FILE_ZIP_EXT = config["KRAKEN"]["FILE_ZIP_EXT"]
KRAKEN_URL = config["KRAKEN"]["URL"]

# All rull defines all the output files that are needed to run the pipeline.  Each input should match a rules output below
rule all:
    input:
        ### FASTQC ###
        expand("{fastqc_reports}/{sample}_{rep}_fastqc.html", sample=CONDITIONS, rep=REPLICATES, fastqc_reports=FASTQC_REPORTS),
        expand("{fastqc_reports}/{sample}_{rep}_fastqc.zip", sample=CONDITIONS, rep=REPLICATES, fastqc_reports=FASTQC_REPORTS),
        
        ### trimmomatic ###
        expand("{trimmed}/output_forward_paired_{sample}.fq.gz", trimmed=TRIM_FOLDER, sample=CONDITIONS),
        expand("{trimmed}/output_forward_unpaired_{sample}.fq.gz", trimmed=TRIM_FOLDER, sample=CONDITIONS),
        expand("{trimmed}/output_reverse_paired_{sample}.fq.gz", trimmed=TRIM_FOLDER, sample=CONDITIONS),
        expand("{trimmed}/output_reverse_unpaired_{sample}.fq.gz", trimmed=TRIM_FOLDER, sample=CONDITIONS),

        ### TRIMMED FASTQC ###
        expand("{fastqc_trimmed_reports}/output_forward_paired_{sample}_fastqc.html",sample=CONDITIONS, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
        expand("{fastqc_trimmed_reports}/output_forward_paired_{sample}_fastqc.zip",sample=CONDITIONS, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
        expand("{fastqc_trimmed_reports}/output_reverse_paired_{sample}_fastqc.html",sample=CONDITIONS, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
        expand("{fastqc_trimmed_reports}/output_reverse_paired_{sample}_fastqc.zip",sample=CONDITIONS, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
        expand("{fastqc_trimmed_reports}/output_forward_unpaired_{sample}_fastqc.html",sample=CONDITIONS, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
        expand("{fastqc_trimmed_reports}/output_forward_unpaired_{sample}_fastqc.zip",sample=CONDITIONS, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
        expand("{fastqc_trimmed_reports}/output_reverse_unpaired_{sample}_fastqc.html",sample=CONDITIONS, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
        expand("{fastqc_trimmed_reports}/output_reverse_unpaired_{sample}_fastqc.zip",sample=CONDITIONS, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
    
        ### MULTIQC ###
        expand("{multiqc_folder}/multiqc_report.html", multiqc_folder=MUTIQC_FOLDER),
        expand("{multiqc_folder}/multiqc_report_trimmed.html", multiqc_folder=MUTIQC_FOLDER),

        ### Merge ###
        expand("{trimmed_merged_folder}/{sample}_merged.fq",trimmed_merged_folder=TRIM_MERGE_FOLDER, sample=CONDITIONS),
        expand("{trimmed_merged_folder}/{sample}_unmerged.fq",trimmed_merged_folder=TRIM_MERGE_FOLDER, sample=CONDITIONS),
        expand("{trimmed_merged_folder}/{sample}_ihist.txt",trimmed_merged_folder=TRIM_MERGE_FOLDER, sample=CONDITIONS),

        ### CLEAN UP Download files ##
        "outputs/del.txt",

        ### DIAMOND ###
        "outputs/download_ref.txt",  #Placeholder to exectue download rule for the FASTA database
        expand("{diamond_folder}/{sample}.dmd", sample=CONDITIONS, diamond_folder=DIAMOND_FOLDER),

        ### KRAKEN ###
        #"outputs/download_kraken.txt", #Placeholder to exectue download rule for the KRAKEN database


# Run FastQC on the data
rule run_fastqc:
    input:
        s3.remote(expand("{s3bucket}/{folder}/{sample}_{rep}.fastq.gz", sample=CONDITIONS, rep=REPLICATES, s3bucket=S3_BUCKET, folder=DATA_FOLDER))
    output:
        html=expand("{fastqc_reports}/{sample}_{rep}_fastqc.html",sample=CONDITIONS, rep=REPLICATES,fastqc_reports=FASTQC_REPORTS),
        zip=expand("{fastqc_reports}/{sample}_{rep}_fastqc.zip",sample=CONDITIONS, rep=REPLICATES,fastqc_reports=FASTQC_REPORTS)
    conda:
        "envs/environment.yaml"
    threads: FASTQC_THREADS
    resources:
        mem_mb=FASTQC_MEM_MB
    shell:
        "fastqc {input} --outdir {FASTQC_REPORTS}/ --threads {FASTQC_THREADS}"

# Consolidates all QC files into single report pre/post trimming
rule multiqc:
    input:
        # Although we are not using these files in the shell command, they are needed to trigger the rule after the fastqc reports are created
        R1 = expand("{fastqc_reports}/{sample}_{rep}_fastqc.html",sample=CONDITIONS, rep=REPLICATES,fastqc_reports=FASTQC_REPORTS),
        R1_trimmed = expand("{fastqc_trimmed_reports}/output_forward_paired_{sample}_fastqc.html",sample=CONDITIONS, rep=REPLICATES, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
    output:
        R1_report = expand("{multiqc_folder}/multiqc_report.html", multiqc_folder=MUTIQC_FOLDER),
        R2_report = expand("{multiqc_folder}/multiqc_report_trimmed.html", multiqc_folder=MUTIQC_FOLDER)
    conda: "envs/environment.yaml"
    shell:
        "multiqc -n multiqc_report.html -o {MUTIQC_FOLDER} {FASTQC_REPORTS} --force; multiqc -n multiqc_report_trimmed.html -o {MUTIQC_FOLDER} {FASTQC_TRIMMED_REPORTS} --force;"

# Running FastQC on reads before and after trimming should be done to validate trimming step
# When reading some claim fastp is 3x faster than trimmomatic.  Could be worth looking into. https://github.com/OpenGene/fastp
rule trimmomatic_pe:
    input:
        forward = s3.remote(expand("{s3bucket}/{folder}/{sample}_{rep}.fastq.gz", sample=CONDITIONS, rep="R1", s3bucket=S3_BUCKET, folder=DATA_FOLDER)),
        backward = s3.remote(expand("{s3bucket}/{folder}/{sample}_{rep}.fastq.gz", sample=CONDITIONS, rep="R2", s3bucket=S3_BUCKET, folder=DATA_FOLDER)),
        #adapter = expand("{adapter_folder}/{adapter_file}", adapter_folder=ADATPERS_FOLDER, adapter_file=ADAPTER_FILE)
        adapter = s3.remote(expand("{s3bucket}/{adapter_folder}/{adapter_file}", s3bucket=S3_BUCKET, adapter_folder=ADATPERS_FOLDER, adapter_file=ADAPTER_FILE))
    output:
        # forward reads
        forward_paired = "{trimmed}/output_forward_paired_{sample}.fq.gz",
        forward_unpaired = "{trimmed}/output_forward_unpaired_{sample}.fq.gz",
        # Backward reads
        backward_paired = "{trimmed}/output_reverse_paired_{sample}.fq.gz",
        backward_unpaired = "{trimmed}/output_reverse_unpaired_{sample}.fq.gz"
    conda:
        "envs/environment.yaml"
    # log:
    #     "/logs/trimmomatic/{sample}.log"
    threads: TRIM_THREADS
    resources:
        mem_mb=TRIM_MEM_MB
    shell:
        "trimmomatic PE "
        "-threads {TRIM_THREADS} "
        "-phred33 "
        "{input.forward} {input.backward} "
        "{output.forward_paired} {output.forward_unpaired} {output.backward_paired} {output.backward_unpaired} "
        #"LEADING:3 "
        #"TRAILING:3 "
        "SLIDINGWINDOW:{TRIM_SLIDINGWINDOW} "
        "MINLEN:{TRIM_MINLEN} "
        #"HEADCROP:1 " # Have a look at the fastqc profiles to make sure you are cropping enough bases at the beginning of the reads.
        #"CROP:80"  # crop is optional. If for some reason you are still stuck with overrepresented kmers at the end, use crop=<in> to force them off.
        "ILLUMINACLIP:{input.adapter}:{TRIM_ADAPTER_SETTINGS}"  #https://github.com/usadellab/Trimmomatic/tree/main/adapters

# Run FastQC on the trimmed data
rule run_trimmed_fastqc:
    input:
        # forward reads
        forward_paired = expand("{trimmed}/output_forward_paired_{sample}.fq.gz",trimmed=TRIM_FOLDER, sample=CONDITIONS),
        forward_unpaired = expand("{trimmed}/output_forward_unpaired_{sample}.fq.gz",trimmed=TRIM_FOLDER, sample=CONDITIONS),
        # Backward reads
        backward_paired = expand("{trimmed}/output_reverse_paired_{sample}.fq.gz",trimmed=TRIM_FOLDER, sample=CONDITIONS),
        backward_unpaired = expand("{trimmed}/output_reverse_unpaired_{sample}.fq.gz",trimmed=TRIM_FOLDER, sample=CONDITIONS)
    output:
        html1=expand("{fastqc_trimmed_reports}/output_forward_paired_{sample}_fastqc.html",sample=CONDITIONS, rep=REPLICATES, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
        zip1=expand("{fastqc_trimmed_reports}/output_forward_paired_{sample}_fastqc.zip",sample=CONDITIONS, rep=REPLICATES, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
        html2=expand("{fastqc_trimmed_reports}/output_reverse_paired_{sample}_fastqc.html",sample=CONDITIONS, rep=REPLICATES, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
        zip2=expand("{fastqc_trimmed_reports}/output_reverse_paired_{sample}_fastqc.zip",sample=CONDITIONS, rep=REPLICATES, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
        html3=expand("{fastqc_trimmed_reports}/output_forward_unpaired_{sample}_fastqc.html",sample=CONDITIONS, rep=REPLICATES, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
        zip3=expand("{fastqc_trimmed_reports}/output_forward_unpaired_{sample}_fastqc.zip",sample=CONDITIONS, rep=REPLICATES, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
        html4=expand("{fastqc_trimmed_reports}/output_reverse_unpaired_{sample}_fastqc.html",sample=CONDITIONS, rep=REPLICATES, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS),
        zip4=expand("{fastqc_trimmed_reports}/output_reverse_unpaired_{sample}_fastqc.zip",sample=CONDITIONS, rep=REPLICATES, fastqc_trimmed_reports=FASTQC_TRIMMED_REPORTS)
    threads: FASTQC_THREADS
    resources:
        mem_mb=FASTQC_MEM_MB
    conda:
        "envs/environment.yaml"
    shell:
        "fastqc {input} --outdir {FASTQC_TRIMMED_REPORTS}/ --threads {FASTQC_THREADS}"

# Clean up the S3 bucket files after trimming.  
# This is because keep_local was used and it will leave them on the EFS otherwise.  Snakemake is supposed to only remove the remote files once all rules did not depend on it but that is not working right when using expand().
rule clean_up:
    input:
       R1_report = expand("{multiqc_folder}/multiqc_report.html", multiqc_folder=MUTIQC_FOLDER)
    output:
        "outputs/del.txt"
    shell:
        "rm -rf {S3_BUCKET}; touch {output}"

# Download the diamond reference and store it outside the workflow.  Note it is not an output because we don't want it uploaded back to s3 under the job output files.
# By downloading it outside the workflow it will only be done one time and will not have to download 300GB each time however you will be charged storage for it on the EFS for the life of the context.
# wget -c will resume the file if it fails
rule download_reference_makedb:
    output:
        "outputs/download_ref.txt"
    conda:
        "envs/environment.yaml"
    shell:
       """
        # Make the directories if required
        mkdir -p ../database
        mkdir -p ../database/FASTA
        mkdir -p outputs
        if [ ! -f "../database/FASTA/{INPUT_FASTA}.dmnd" ]; then         
           file="../database/FASTA/{INPUT_FASTA_ZIP}.{INPUT_FASTA_ZIP_EXT}"
           if [ -f "$file" ]; then
                echo "Local zip file does exist."
                local_size=$(stat -c %s "$file")
                remote_size=$(curl -sI {INPUT_FASTA_URL} | grep -i Content-Length | awk '{{print $2}}')
                if [ "$local_size" -eq "$remote_size" ]; then
                   echo "Local file size matches remote file size"
                else
                   echo "Local file size does not match remote file size.  Continue download."
                   wget -c {INPUT_FASTA_URL} -P "../database/FASTA"
                   echo "download complete" 
               fi
               #replace with gunzip for gz
               unzip -o ../database/FASTA/{INPUT_FASTA_ZIP}.{INPUT_FASTA_ZIP_EXT} -d ../database/FASTA/
               echo "unzip complete"
            else
                echo "Local zip file does not exist."
                # check if unziped file exists and if not download it 
                if [ ! -f "../database/FASTA/{INPUT_FASTA}" ]; then
                    wget -c {INPUT_FASTA_URL} -P "../database/FASTA"
                    unzip -o ../database/FASTA/{INPUT_FASTA_ZIP}.{INPUT_FASTA_ZIP_EXT} -d ../database/FASTA/  
                    echo "download and unzip complete"
                fi
            fi      
                  
            # make the db if it does not exist
            if [ ! -f "../database/FASTA/{INPUT_FASTA}.dmnd" ]; then
               diamond makedb --in ../database/FASTA/{INPUT_FASTA_FOLDER}/{INPUT_FASTA}.{INPUT_FASTA_EXT} --db ../database/FASTA/{INPUT_FASTA}.dmnd
               rm -r {INPUT_FASTA_FOLDER}
               rm -r *.{INPUT_FASTA_ZIP_EXT}
               echo "makedb complete" 
            fi
        fi
        echo "download_reference_makedb complete" > outputs/download_ref.txt
       """

rule bbmerge:
    # Merges paired end reads together to be used with Abyss
    input:
       R1 = expand("{trimmed}/output_forward_paired_{sample}.fq.gz",trimmed=TRIM_FOLDER, sample=CONDITIONS),
       R2 = expand("{trimmed}/output_reverse_paired_{sample}.fq.gz",trimmed=TRIM_FOLDER, sample=CONDITIONS),
    output:
        out_merged = expand("{trimmed_merged_folder}/{sample}_merged.fq",trimmed_merged_folder=TRIM_MERGE_FOLDER, sample=CONDITIONS),
        out_unmerged = expand("{trimmed_merged_folder}/{sample}_unmerged.fq",trimmed_merged_folder=TRIM_MERGE_FOLDER, sample=CONDITIONS),
        ihist = expand("{trimmed_merged_folder}/{sample}_ihist.txt",trimmed_merged_folder=TRIM_MERGE_FOLDER, sample=CONDITIONS)
    conda: "envs/environment.yaml"
    shell: "bbmerge.sh in1={input.R1} in2={input.R2} out={output.out_merged} outu={output.out_unmerged} ihist={output.ihist}"


# Run diamond blastx on the trimmed files.  Note the database is downloaded outside the workflow to save time and storage costs.
# Adjust settings as required.  This is a basic example.
rule diamond_blastx:
    input:
       merged_paired = expand("{trimmed_merged_folder}/{sample}_merged.fq",trimmed_merged_folder=TRIM_MERGE_FOLDER, sample=CONDITIONS),
       db="outputs/download_ref.txt"
    output:
       expand("{diamond_folder}/{sample}.dmd", sample=CONDITIONS, diamond_folder=DIAMOND_FOLDER)
    threads: DIAMOND_THREADS
    resources:
        mem_mb=DIAMOND_MEM_MB
    conda:
        "envs/environment.yaml"
    shell:
        "diamond blastx --threads {DIAMOND_THREADS} --outfmt {DIAMOND_OUTPUT_FMT} -q {input.merged_paired} -d ../database/FASTA/{INPUT_FASTA}.dmnd -o {output} -e {DIAMOND_EVALUE} -k {DIAMOND_K} --id {DIAMOND_ID} {DIAMOND_ARGS}"

rule download_kraken:
    output:
        "outputs/download_kraken.txt"
    conda:
        "envs/environment.yaml"
    shell:
       """
        # Make the directories if required
        mkdir -p ../database
        mkdir -p ../database/KRAKEN
        mkdir -p outputs
        if [ ! -f "../database/KRAKEN/{KRAKEN_FILE}" ]; then         
           file="../database/KRAKEN/{KRAKEN_FILE}.{KRAKEN_FILE_ZIP_EXT}"
           if [ -f "$file" ]; then
                echo "Local kraken file does exist."
                local_size=$(stat -c %s "$file")
                remote_size=$(curl -sI {KRAKEN_URL} | grep -i Content-Length | awk '{{print $2}}')
                if [ "$local_size" -eq "$remote_size" ]; then
                   echo "Local file size matches remote file size"
                else
                   echo "Local file size does not match remote file size.  Continue download."
                   wget -c {KRAKEN_URL} -P "../database/KRAKEN"
                   echo "download complete" 
               fi
               #replace with gunzip for gz
               tar -xzf ../database/KRAKEN/{KRAKEN_FILE}.{KRAKEN_FILE_ZIP_EXT} -C ../database/KRAKEN/
               echo "unzip complete"
            else
                echo "Local zip file does not exist."
                # check if unziped file exists and if not download it 
                if [ ! -f "../database/KRAKEN/{KRAKEN_FILE}" ]; then
                    wget -c {KRAKEN_URL} -P "../database/KRAKEN"
                    tar -xzf ../database/KRAKEN/{KRAKEN_FILE}.{KRAKEN_FILE_ZIP_EXT} -C ../database/KRAKEN/  
                    echo "download and unzip complete"
                fi
            fi      
        fi
        echo "KRAKEN download complete" > outputs/download_kraken.txt
       """