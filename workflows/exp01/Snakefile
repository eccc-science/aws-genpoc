
# All rull defines all the output files that are needed to run the pipeline.  Each input should match a rules output below
rule all:
   input:
      "outputs/workflow_complete"

include: "modules/step0-config.smk"

def doStep(steps, thisStep):
   for step in steps.split(","):
      if "-" in step:
         if int(step.split("-")[0]) <= int(thisStep) <= int(step.split("-")[1]):
            return True
      else:
         if int(thisStep) == int(step):
            return True
   return False

if doStep(config["STEPS"], 1):
   STAGE_OUTPUTS.append(expand("{multiqc_folder}/multiqc_report.html", multiqc_folder=MUTIQC_FOLDER))
   include: "modules/step1-analyze.smk"

if doStep(config["STEPS"], 2):
   # Stage 2_2
   STAGE_OUTPUTS.append(expand("{trimmed_merged_folder}/{sample}_merged.fq",trimmed_merged_folder=TRIM_MERGE_FOLDER, sample=CONDITIONS))
   STAGE_OUTPUTS.append(expand("{trimmed_merged_folder}/{sample}_unmerged.fq",trimmed_merged_folder=TRIM_MERGE_FOLDER, sample=CONDITIONS))
   STAGE_OUTPUTS.append(expand("{trimmed_merged_folder}/{sample}_ihist.txt",trimmed_merged_folder=TRIM_MERGE_FOLDER, sample=CONDITIONS))

   # Stage 2_3
   STAGE_OUTPUTS.append(expand("{multiqc_folder}/multiqc_report_trimmed.html", multiqc_folder=MUTIQC_FOLDER))
   STAGE_OUTPUTS.append(expand("{multiqc_folder}/multiqc_report_trimmed.html", multiqc_folder=MUTIQC_FOLDER))
   include: "modules/step2-trim-merge.smk"

if doStep(config["STEPS"], 3):
   STAGE_OUTPUTS.append(expand("{diamond_folder}/{sample}.dmd", sample=CONDITIONS, diamond_folder=DIAMOND_FOLDER))
   include: "modules/step3-diamond.smk"

if doStep(config["STEPS"], 4):
   # Stage 4_2
   STAGE_OUTPUTS.append(expand("{sample}.txt"))
   include: "modules/step4-agr-ranker.smk"

if doStep(config["STEPS"], 5):
   include: "modules/step5-antismash.smk"



# Flatten the stage outputs list, to be a single list.
#   Probabaly a better way to do this, but it works for now.
STAGE_OUTPUTS = [i for _,o in enumerate(STAGE_OUTPUTS) for _,i in enumerate(o)]
include: "modules/step6-cleanup.smk"
